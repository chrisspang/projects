# Run nginx as www-data.
#user www-data;
# One worker process per CPU core is a good guideline.
worker_processes 1;
# The pidfile location.
pid /home/chris/rails/projects/tmp/pids/nginx.pid;

error_log /home/chris/rails/projects/log/nginx_root_error.log;

# For a single core server, 1024 is a good starting point. Use `ulimit -n` to
# determine if your server can handle more.
events {
  worker_connections 1024;
  accept_mutex on;   ## if worker_processes > 1
}

http {

  ##
  # Basic Settings
  ##
  sendfile on;
  tcp_nopush on;
  tcp_nodelay off;
  keepalive_timeout 65;
  types_hash_max_size 2048;
  server_tokens off;

  include /home/chris/rails/projects/etc/mime.types;
  default_type application/octet-stream;

  ##
  # Logging Settings
  ##

  access_log /home/chris/rails/projects/log/nginx_access.log;
  error_log /home/chris/rails/projects/log/nginx_error.log;

  ##
  # Gzip Settings
  ##
  gzip on;
  gzip_disable "msie6";
  gzip_http_version 1.1;
  gzip_proxied any;
  gzip_min_length 500;
  gzip_types text/plain text/xml text/css
    text/comma-separated-values text/javascript
    application/x-javascript application/atom+xml;

  ##
  # Unicorn Rails
  ##

  # The socket here must match the socket path that you set up in unicorn.rb.
  upstream unicorn {
    server unix:/home/chris/rails/projects/tmp/unicorn.sock fail_timeout=0;
  }

  server {
    listen 3002;
    server_name mysite.com; # Replace this with your site's domain.

    keepalive_timeout 300;

    client_max_body_size 4G;

    root /home/chris/rails/projects/public;

    try_files $uri/index.html $uri.html $uri @unicorn;

    location @unicorn {
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_set_header X-Forwarded_Proto $scheme;
          proxy_redirect off;
          # This passes requests to unicorn, as defined in /etc/nginx/nginx.conf
          proxy_pass http://unicorn;
          proxy_read_timeout 300s;
          proxy_send_timeout 300s;
    }

    # You can override error pages by redirecting the requests to a file in your
    # application's public folder, if you so desire:
    error_page 500 502 503 504 /500.html;
    location = /500.html {
       root /home/chris/rails/projects/public;
    }
  }
}
